{
  "navigation": [
    { "name": "about me", "href": "#about_me_section" },
    { "name": "tech stack", "href": "#tech_stack_section" },
    { "name": "experience", "href": "#experience_section" },
    { "name": "projects", "href": "#project_section" },
    { "name": "continuous learning", "href": "#continuous_learning_section" }
  ],
  "tech_stack": [
    {
      "title": "JavaScript",
      "image": "src/assets/icons/javascript.svg",
      "experience": ""
    },
    {
      "title": "TypeScript",
      "image": "src/assets/icons/typescript.svg",
      "experience": ""
    },
    {
      "title": "C",
      "image": "src/assets/icons/c.svg",
      "experience": ""
    },
    {
      "title": "CSS",
      "image": "src/assets/icons/css.svg",
      "experience": ""
    },
    {
      "title": "HTML",
      "image": "src/assets/icons/html.svg",
      "experience": ""
    },
    {
      "title": "Java",
      "image": "src/assets/icons/java.svg",
      "experience": ""
    },
    {
      "title": "Springboot",
      "image": "src/assets/icons/springboot.svg",
      "experience": ""
    },
    {
      "title": "React",
      "image": "src/assets/icons/react.svg",
      "experience": ""
    },
    {
      "title": "Next.js",
      "image": "src/assets/icons/nextjs.svg",
      "experience": ""
    },
    {
      "title": "Tailwind CSS",
      "image": "src/assets/icons/tailwindcss.svg",
      "experience": ""
    },
    {
      "title": "Redux",
      "image": "src/assets/icons/redux.svg",
      "experience": ""
    },
    {
      "title": "node.js",
      "image": "src/assets/icons/nodejs.svg",
      "experience": ""
    },
    {
      "title": "PostgreSQL",
      "image": "src/assets/icons/postgreSQL.svg",
      "experience": ""
    },
    {
      "title": "Prisma",
      "image": "src/assets/icons/prisma.svg",
      "experience": ""
    },
    {
      "title": "Docker",
      "image": "src/assets/icons/docker.svg",
      "experience": ""
    },
    {
      "title": "AWS",
      "image": "src/assets/icons/aws.svg",
      "experience": ""
    },
    {
      "title": "Postman",
      "image": "src/assets/icons/postman.svg",
      "experience": ""
    },
    {
      "title": "Git",
      "image": "src/assets/icons/git.svg",
      "experience": ""
    },
    {
      "title": "Jenkins",
      "image": "src/assets/icons/jenkins.svg",
      "experience": ""
    },
    {
      "title": "Python",
      "image": "src/assets/icons/python.svg",
      "experience": ""
    }
  ],
  "project": [
    {
      "image": "src/assets/icons/springboot.svg",
      "github_link": "https://github.com/CharlesZhao27/portfolio-front-end",
      "project_name": "OrderHere Online Ordering Platform",
      "summary": [
        "Project Design and User Experience: Led the project design phase, meticulously crafting user flows and stories to align with our strategic vision for an intuitive and efficient online ordering platform. Designed a robust user database, integrating Postgres within a Docker environment for enhanced scalability and reliability.",
        "Backend Development: Developed and implemented a secure backend infrastructure using Java Spring Boot and Spring Security, including the creation of user login and CRUD APIs. Established JWT authentication processes to safeguard user interactions and resolved CORS issues to ensure smooth frontend-backend communication.",
        "ORM and Database Integration: Configured a JPA model ORM for efficient data handling and interaction between the application layer and the Postgres database, optimizing data storage and retrieval processes.",
        "Authentication and Authorization: Engineered a comprehensive authentication and authorization framework to differentiate user roles, granting tailored access to APIs based on user permissions. This included implementing OAuth integration for Google and Facebook logins, alongside traditional credential-based authentication.",
        "Frontend Implementation: Executed the frontend development with a focus on UI/UX design, creating engaging login interfaces with popup modals and loading animations using axios for data fetching. Ensured robust session management to validate user login states, enhancing security and user experience.",
        "API Documentation and Code Quality: Implemented Swagger UI for clear and interactive API documentation, facilitating easier integration and usage by developers. Integrated SonarLint into the backend development process for autonomous code formatting, contributing to higher code quality and maintainability."
      ]
    },
    {
      "image": "https://grammy.dev/images/Y.svg",
      "github_link": "https://github.com/CharlesZhao27/portfolio-front-end",
      "project_name": "Group Chat Helper: Telegram Bot",
      "summary": [
        "Codebase Refactoring: Undertook a comprehensive refactoring of the existing hard-coded codebase to modularize components, improve code readability, and enhance future maintainability.",
        "Authentication System Overhaul: Re-implemented the authentication system utilizing Next.auth to streamline user login processes and enhance security measures.",
        "Configuration Management: Developed a dynamic key-value pair configuration table within the database to support flexible service customization by administrators, enabling a more adaptable application environment.",
        "User Interface Development: Leveraged Material UI and React Hooks to design and implement complex forms for user interaction, including features for inline editing, adding new rows, inline deletion, and comprehensive form validation.",
        "Database Integration and Error Handling: Enhanced database interaction with updated CRUD operations, incorporated robust error handling mechanisms to improve user feedback and system reliability during data submission and retrieval processes.",
        "Service Customization: Enabled users to modify configuration settings for various services directly through the user interface, ensuring a tailored experience that meets the diverse needs of different user groups."
      ]
    },
    {
      "image": "src/assets/icons/redis.svg",
      "github_link": "https://github.com/CharlesZhao27/portfolio-front-end",
      "project_name": "CryptoData: Display and Cache",
      "summary": [
        "Codebase Refactoring: Undertook a comprehensive refactoring of the existing hard-coded codebase to modularize components, improve code readability, and enhance future maintainability.",
        "Authentication System Overhaul: Re-implemented the authentication system utilizing Next.auth to streamline user login processes and enhance security measures.",
        "Configuration Management: Developed a dynamic key-value pair configuration table within the database to support flexible service customization by administrators, enabling a more adaptable application environment.",
        "User Interface Development: Leveraged Material UI and React Hooks to design and implement complex forms for user interaction, including features for inline editing, adding new rows, inline deletion, and comprehensive form validation.",
        "Database Integration and Error Handling: Enhanced database interaction with updated CRUD operations, incorporated robust error handling mechanisms to improve user feedback and system reliability during data submission and retrieval processes.",
        "Service Customization: Enabled users to modify configuration settings for various services directly through the user interface, ensuring a tailored experience that meets the diverse needs of different user groups."
      ]
    },
    {
      "image": "src/assets/icons/nextjs.svg",
      "github_link": "https://github.com/CharlesZhao27/portfolio-front-end",
      "live_demo": "https://next-ido.vercel.app/",
      "project_name": "Next IDO",
      "summary": [
        "Leveraged Storyblok CMS to integrate front-end development with CMS systems, enabling dynamic content management within Next.js/React applications.",
        "Engineered complex React components adhering to the Single Responsibility Principle to ensure code robustness and reusability.",
        "Led the front-end team in collaboration with UI/UX designers to seamlessly implement the product vision, ensuring high-quality user experiences.",
        "Conducted thorough code reviews to identify and advocate for best practices, prevent common bugs, and pinpoint potential issues, contributing to the overall code quality and team development."
      ]
    },
    {
      "image": "src/assets/icons/css.svg",
      "github_link": "https://github.com/CharlesZhao27/portfolio-front-end",
      "project_name": "Reverse Engineer: Elyssa.io & AIGC.io",
      "summary": [
        "Successfully reverse-engineered and rebuilt the Elyssa.io and AIGC.io websites using Next.js and Tailwind CSS, enhancing site performance and maintainability.",
        "Integrated third-party NPM packages, such as AOS (Animate On Scroll), to implement sophisticated on-scroll animations, improving user engagement.",
        "Demonstrated in-depth understanding of the CSS Box Model, enabling precise layout and design implementation across different web components.",
        "Crafted complex animations and CSS styles tailored for commercial websites, elevating the visual appeal and interactivity of the user interface."
      ]
    },

    {
      "image": "https://go.dev/images/gophers/biplane.svg",
      "github_link": "https://github.com/CharlesZhao27/portfolio-front-end",
      "project_name": "Fetcher",
      "summary": [
        "Developed Fetcher, a Git CLI tool in Go, enabling automated fetching of repositories from remote sources on a scheduled basis, enhancing workflow efficiency.",
        "Acquired proficiency in Go programming language, focusing on application structure and syntax best practices for building scalable and maintainable software.",
        "Gained in-depth understanding of Git internals and operations, strengthening version control management skills and enhancing project collaboration capabilities.",
        "Advanced knowledge in error handling techniques in Go, emphasizing robustness and reliability through critical thinking and meticulous consideration of edge cases."
      ]
    },
    {
      "image": "src/assets/icons/c.svg",
      "github_link": "https://github.com/CharlesZhao27/portfolio-front-end",
      "project_name": "Concurrency Scheduler and Memory Allocator",
      "summary": [
        "Designed and implemented a Concurrency Scheduler in C, utilizing four distinct algorithms to manage process scheduling on a single-threaded CPU, maximizing parallel execution capabilities.",
        "Developed efficient memory management strategies for process and batch task allocation within the scheduler, ensuring optimal use of resources and freeing memory post-execution.",
        "Simulated Virtual Memory mechanisms to enhance the scheduler's performance and reliability, demonstrating a deep understanding of low-level system operations and memory handling."
      ]
    },
    {
      "image": "src/assets/icons/java.svg",
      "github_link": "https://github.com/CharlesZhao27/portfolio-front-end",
      "project_name": "Dungeon World: Maze Game",
      "summary": [
        "Developed a maze game in Java, leveraging a simple third-party library and adhering strictly to Object-Oriented Programming principles such as inheritance, encapsulation, and abstraction.",
        "Utilized design patterns such as Factory and Singleton to architect the game, ensuring modular, extensible, and maintainable code.",
        "Implemented the Depth-First Search (DFS) algorithm to generate unique mazes with a single entrance and exit, enhancing game challenge and player engagement."
      ]
    }
  ]
}
